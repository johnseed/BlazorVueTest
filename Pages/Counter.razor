@page "/counter"
@inject IJSRuntime JS

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>
<p role="status">Time: @time</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>


<p>
    <button @onclick="RedBlazor">调用JS</button>
</p>
<p>
    @text
</p>
@code {
    private int currentCount = 0;
    private string time = "Not set";

    private async Task IncrementCount()
    {
        currentCount++;
        try
        {
            time = await TimeNLPSDK.ParseCNTime("2023年01月01日");
        }
        catch (Exception ex)
        {
            time = ex.ToString();
        }
    }

    [JSInvokable]
    public static Task<int[]> ReturnArrayAsync()
    {
        return Task.FromResult(new int[] { 1, 2, 3 });
    }

    [JSInvokable]
    public async static Task<string> ParseTime(string cnTime)
    {
        return await TimeNLPSDK.ParseCNTime(cnTime);
    }

    [JSInvokable]
    public async static Task<InterpResult> Interp(List<int> lon, List<int> lat)
    {
        return await InterpSDK.Interp(lon, lat);
    }
    public class InterpParam
    {
        public List<int> lon { get; set; }
        public List<int> lat { get; set; }
    }

    [JSInvokable]
    public async static Task InterpProgress(List<InterpParam> paramList)
    {
        int count = paramList.Count;
        int pos = 0;
        foreach (var param in paramList)
        {
            var interpResult = await InterpSDK.Interp(param.lon, param.lat);
            var progress = (double)++pos / count;
            await Store.JS.InvokeVoidAsync("interpProgress", interpResult, progress);
            await Task.Delay(1000);
        }
    }

    private MarkupString text;

    private async Task RedBlazor()
    {
        text = new(await JS.InvokeAsync<string>("redBlazor", "Hello Blazor"));
        while (true)
        {
            Thread thread = new(() =>
            {
                JS.InvokeVoidAsync("redBlazor", $"{Thread.CurrentThread.ManagedThreadId} : Hello Blazor");
            });
            thread.Start();
            await Task.Delay(1000);
        }
    }


    private async Task ChangeProgress()
    {
        Random random = new();
        while (true)
        {
            await JS.InvokeAsync<string>("changeProgress", random.NextDouble());
            await Task.Delay(1000);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await ChangeProgress();
    }
}
